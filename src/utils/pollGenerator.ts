
import { PollQuestion } from '@/types';

// This would normally call an OpenRouter API with a chosen model
export async function generatePollFromTranscript(
  transcript: string,
  numberOfOptions: number = 4
): Promise<PollQuestion | null> {
  try {
    // For now, we'll implement a simple algorithm to generate questions
    // In production, this would call an AI API
    
    // Simple algorithm: Find sentences with question words or key phrases
    const sentences = transcript
      .split(/[.!?]/)
      .map(s => s.trim())
      .filter(s => s.length > 20); // Only consider substantial sentences
    
    if (sentences.length === 0) {
      return null;
    }

    // Find potential question candidates (sentences with keywords)
    const questionKeywords = ['what', 'how', 'why', 'when', 'which', 'where', 'important', 'key', 'main'];
    const questionCandidates = sentences.filter(s => 
      questionKeywords.some(keyword => s.toLowerCase().includes(keyword))
    );
    
    let sentence = questionCandidates.length > 0 
      ? questionCandidates[Math.floor(Math.random() * questionCandidates.length)]
      : sentences[Math.floor(Math.random() * sentences.length)];

    // Transform sentence into a question if it's not already one
    let question = sentence;
    if (!question.toLowerCase().includes('what') && !question.toLowerCase().includes('how')) {
      question = `What is the main point of: "${sentence}"`;
    }
    
    // Generate mock options (in production would be generated by AI)
    // Extract key phrases from the sentence
    const words = sentence.split(' ').filter(w => w.length > 3);
    const options = [];
    
    // First option is usually the correct one in our mock
    options.push("The answer from the lecture");

    // Generate some plausible but incorrect options
    for (let i = 1; i < numberOfOptions; i++) {
      options.push(`Alternative answer option ${i}`);
    }

    return {
      id: `poll-${Date.now()}`,
      question,
      options,
      generatedFrom: sentence,
      createdAt: new Date()
    };
  } catch (error) {
    console.error('Error generating poll:', error);
    return null;
  }
}
